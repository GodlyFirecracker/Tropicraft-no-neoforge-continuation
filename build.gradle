plugins {
    id 'eclipse'
    id 'idea'
    id 'java-library'
    id 'net.neoforged.moddev' version '1.0.17'
}

group = 'net.tropicraft'
base {
    archivesName = 'Tropicraft'
}

ext.buildnumber = 0

if (System.getenv('GHA_RELEASE_WORKFLOW')) {
    version = "${mod_version}"
} else if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}-${release_type}+${buildnumber}-gha"
} else {
    project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'
    version = "${mod_version}-${release_type}+${buildnumber}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }

    runs {
        client {
            client()
            programArguments.addAll '--username', 'Dev###'
        }

        server {
            server()
            programArgument '--nogui'
        }

        data {
            data()
            def inputResourcesPath = file('src/main/resources/').getAbsolutePath()
            def generatedResourcesPath = file('src/generated/resources/').getAbsolutePath()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', generatedResourcesPath, '--existing', inputResourcesPath
        }

        configureEach {
            logLevel = org.slf4j.event.Level.WARN
        }
    }

    mods {
        "${project.mod_id}" {
            sourceSet sourceSets.main
            sourceSet sourceSets.test
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven { url = "https://maven.ithundxr.dev/snapshots/" }
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    jarJar(implementation("com.tterrag.registrate:Registrate:MC1.21-${registrate_version}")) {
        version {
            strictly "[MC1.21-${registrate_version},MC1.22)"
            prefer "MC1.21-${registrate_version}"
        }
    }
}

var generateModMetadata = tasks.register('generateModMetadata', ProcessResources) {
    var replaceProperties = [
            mod_version: mod_version,
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from 'src/main/templates'
    into 'build/generated/sources/modMetadata'
}
sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
